name: DevSecOps CI

on:
  push:
    branches: [main]

permissions:
  contents: read
  security-events: write 

jobs:
  devsecops:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:python"

      - name: Scan for secrets with GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pylint pytest

      - name: Lint with pylint
        run: pylint app/ tests/

      - name: Run tests
        run: PYTHONPATH=. pytest

      - name: Scan Terraform with Checkov
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: terraform/
          framework: terraform
          output_format: cli,sarif
          output_file_path: console,terraform-results.sarif
          soft_fail: true

      - name: Upload Checkov scan results
        uses: github/codeql-action/upload-sarif@v3
        if: success() || failure()
        with:
          sarif_file: terraform-results.sarif

      - name: Build Docker image
        run: |
          docker build -t devsecops-fastapi-app:latest .
      
      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'devsecops-fastapi-app:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: false
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
    
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'
  
      - name: Configure Docker to use Artifact Registry
        run: gcloud auth configure-docker ${{ secrets.GCP_REGION }}-docker.pkg.dev
  
      - name: Tag and push image to Artifact Registry
        run: |
          IMAGE="${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_ARTIFACT_REPO_NAME }}/devsecops-fastapi-app:${{ github.sha }}"
          docker tag devsecops-fastapi-app:latest $IMAGE
          docker push $IMAGE

      - name: Install GKE auth plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials fastapi-cluster \
            --region ${{ secrets.GCP_REGION }} \
            --project ${{ secrets.GCP_PROJECT_ID }}

      - name: Update Gatekeeper constraint with registry info
        run: |
          REGISTRY="${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_ARTIFACT_REPO_NAME }}"
          sed -i "s|<REGISTRY_PLACEHOLDER>|$REGISTRY|g" k8s/gatekeeper/constraint.yaml

      - name: Install OPA Gatekeeper
        run: |
          kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper/master/deploy/gatekeeper.yaml
          # Wait for Gatekeeper to be ready
          kubectl wait --for=condition=available --timeout=300s deployment/gatekeeper-controller-manager -n gatekeeper-system

      - name: Apply Gatekeeper template first
        run: |
          kubectl apply -f k8s/gatekeeper/template.yaml
          echo "Waiting for CRD to be registered..."
          sleep 10
          kubectl get crds | grep k8sallowedrepos || sleep 10
          kubectl get crds | grep k8sallowedrepos || sleep 10
          kubectl get crds | grep k8sallowedrepos

      - name: Apply Gatekeeper constraint
        run: |
          kubectl apply -f k8s/gatekeeper/constraint.yaml

      - name: Replace image reference in deployment.yaml
        run: |
          sed -i "s|<IMAGE_PLACEHOLDER>|${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_ARTIFACT_REPO_NAME }}/devsecops-fastapi-app:${{ github.sha }}|" k8s/deployment.yaml
      
      - name: Deploy to GKE
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml